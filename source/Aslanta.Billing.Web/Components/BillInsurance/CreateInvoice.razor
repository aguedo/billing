@page "/"
@rendermode InteractiveServer
@using Aslanta.Billing.Web.BillInsurance
@using Aslanta.Billing.Web.BillInsurance.Models
@inject IInvoiceCreationState InvoiceState
@inject ContextMenuService ContextMenuService

<RadzenStack Orientation="Orientation.Horizontal" Gap="0" AlignItems="AlignItems.Center"
    class="rz-px-4 rz-py-1 rz-border-radius-1" Style="border: var(--rz-grid-cell-border); height: 48px;">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" JustifyContent="JustifyContent.Start"
        AlignItems="AlignItems.Center" class="" Style="border: none; width:50%">
        <RadzenText class="rz-mt-1 rz-mr-2">Missing Info:</RadzenText>
        <RadzenCheckBoxList TValue="int">
            <Items>
                <RadzenCheckBoxListItem Text="Insurance (5)" Value="1" />
                <RadzenCheckBoxListItem Text="Address (3)" Value="2" />
                <RadzenCheckBoxListItem Text="DOB (3)" Value="3" />
                <RadzenCheckBoxListItem Text="Gender (0)" Value="4" />
                <RadzenCheckBoxListItem Text="ICD (0)" Value="4" />
                <RadzenCheckBoxListItem Text="Any (8)" Value="5" />
            </Items>
        </RadzenCheckBoxList>
    </RadzenStack>
</RadzenStack>

<div class="rz-mt-2"
    style="height: calc(100% - 55px); width: @_layout.OrderWidth; float: left; margin:0; margin-right: 8px;">
    <RadzenDataGrid style="height: 100%;" @ref="_orderConfig.Grid" TItem="Order" Data=@InvoiceState.Orders
        @bind-Value=@_orderConfig.Selected AllowFiltering="true" AllowRowSelectOnRowClick="true"
        AllowColumnResize="true" ColumnWidth="200px" AllowAlternatingRows="true"
        GridLines="Radzen.DataGridGridLines.Horizontal" FilterMode="FilterMode.Advanced" AllowSorting="true"
        PageSize="500" Density=@_orderConfig.GridDensity AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
        AllowColumnPicking="true" LogicalFilterOperator="LogicalFilterOperator.And"
        SelectionMode="DataGridSelectionMode.Multiple" PageSizeOptions="@_orderConfig.PageeSizeOptions"
        ShowPagingSummary="true" RowSelect="@OnOrderSelect" RowDeselect="@OnOrderDeselect"
        CellContextMenu="@OnOrderCellContextMenu">
        <HeaderTemplate>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center"
                Wrap="FlexWrap.Wrap">
                <RadzenText class="rz-mt-2" TextStyle="TextStyle.Body2">
                    @InvoiceState.SelectedOrders.Count/@InvoiceState.Orders.Count</RadzenText>
                <RadzenMenu class="options-menu" style="background-color: transparent;">
                    <RadzenMenuItem Text="Options">
                        <RadzenMenuItem Text="Remove Selected"></RadzenMenuItem>
                        <RadzenMenuItem Text="Reload"></RadzenMenuItem>
                        <RadzenSelectBar style="padding:0 4px;" @bind-Value="@_orderConfig.GridDensity"
                            TextProperty="Text" ValueProperty="Value"
                            Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))"
                            Size="ButtonSize.ExtraSmall" />
                    </RadzenMenuItem>
                </RadzenMenu>
            </RadzenStack>

        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Width="50px" Frozen="true" Sortable="false" Filterable="false">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?"
                        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                        Value="@(InvoiceState.SelectedOrders.Count > 0)" Change="@OnSelectAllOrdersChanged" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@InvoiceState.IsOrderSelected(data)"
                        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                        TValue="bool" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Code" Title="Code" Width="140px" Frozen="true" />
            <RadzenDataGridColumn Property="Patient.FirstName" Title="First Name" Width="150px" Frozen="true" />
            <RadzenDataGridColumn Property="Patient.LastName" Title="Last Name" Width="150px" />
            <RadzenDataGridColumn Property="CollectionDate" Title="Collection" Width="150px" FormatString="{0:d}" />
            <RadzenDataGridColumn Property="Patient.DateOfBirth" Title="DOB" Width="150px" FormatString="{0:d}" />
            <RadzenDataGridColumn Property="Insurance.Payer.Code" Title="Insurance" Width="150px" />
        </Columns>
    </RadzenDataGrid>
</div>

@code {
    private Layout _layout = new Layout();
    private OrderGridConfig _orderConfig = new OrderGridConfig();
    private InvoiceItemGridConfig _invoiceItemConfig = new InvoiceItemGridConfig();

    protected override void OnInitialized()
    {
        var orders = InvoiceState.SelectAllOrders;
    }

    private void OnOrderSelect(Order order)
    {
        InvoiceState.SelectOrder(order);
        _invoiceItemConfig.Grid?.Reload();
    }

    private void OnOrderDeselect(Order order)
    {
        InvoiceState.UnselectOrder(order);
        _invoiceItemConfig.Grid?.Reload();
        _invoiceItemConfig.Selected = InvoiceState.SelectedInvoiceItems.ToList();
    }

    private void OnSelectAllOrdersChanged(bool? isSelected)
    {
    }

    void OnOrderCellContextMenu(DataGridCellMouseEventArgs<Order> args)
    {
    }

    class OrderGridConfig
    {
        public IList<Order>? Selected { get; set; }
        public RadzenDataGrid<Order>? Grid { get; set; }
        public IEnumerable<int> PageeSizeOptions { get; } = new int[] { 50, 100, 500, 1000, 10000, 100000 };
        public Density GridDensity { get; set; } = Density.Compact;
    }

    class InvoiceItemGridConfig
    {
        public IList<InvoiceItem>? Selected { get; set; }
        public RadzenDataGrid<InvoiceItem>? Grid { get; set; }
        public Density GridDensity = Density.Compact;
        public IEnumerable<int> PageSizeOptions { get; set; } = new int[] { 50, 100, 500, 1000, 10000, 100000 };
        public IRadzenFormComponent? Editor { get; set; }
        public InvoiceItem? ItemToUpdate { get; set; }
        public string? ColumnEditing { get; set; }
        public bool EditorFocused { get; set; }
    }

    class Layout
    {
        public LayoutType LayoutType { get; set; } = LayoutType.DockRight;
        public string OrderWidth { get; set; } = "calc(40% - 10px)";
        public string InvoiceItemWidth { get; set; } = "60%";
    }

    enum LayoutType
    {
        DockRight = 1,
        DockBottom = 2
    }
}