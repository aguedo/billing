@page "/"
@rendermode InteractiveServer
@using Aslanta.Billing.Web.BillInsurance
@using Aslanta.Billing.Web.BillInsurance.Models
@inject IInvoiceCreationState InvoiceState
@inject ContextMenuService ContextMenuService

<RadzenStack Orientation="Orientation.Horizontal" Gap="0" AlignItems="AlignItems.Center"
    class="rz-px-4 rz-py-1 rz-border-radius-1" Style="border: var(--rz-grid-cell-border); height: 48px;">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" JustifyContent="JustifyContent.Start"
        AlignItems="AlignItems.Center" class="" Style="border: none; width:50%">
        <RadzenText class="rz-mt-1 rz-mr-2">Missing Info:</RadzenText>
        <RadzenCheckBoxList TValue="int">
            <Items>
                <RadzenCheckBoxListItem Text="Insurance (5)" Value="1" />
                <RadzenCheckBoxListItem Text="Address (3)" Value="2" />
                <RadzenCheckBoxListItem Text="DOB (3)" Value="3" />
                <RadzenCheckBoxListItem Text="Gender (0)" Value="4" />
                <RadzenCheckBoxListItem Text="ICD (0)" Value="4" />
                <RadzenCheckBoxListItem Text="Any (8)" Value="5" />
            </Items>
        </RadzenCheckBoxList>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" JustifyContent="JustifyContent.End"
        AlignItems="AlignItems.Center" class="" Style="border: none; width:50%">
        <RadzenSelectBar TValue="LayoutType" @bind-Value="@_layout.LayoutType" Size="ButtonSize.Small"
            Change="() => OnChangeLayout()">
            <Items>
                <RadzenSelectBarItem Icon="dock_to_right" Text="" Value="@LayoutType.DockRight" />
                <RadzenSelectBarItem Icon="dock_to_bottom" Text="" Value="@LayoutType.DockBottom" />
            </Items>
        </RadzenSelectBar>
        <RadzenButton Text="Create Invoice" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" />
    </RadzenStack>
</RadzenStack>

<div class="rz-mt-2"
    style="height: calc(100% - 55px); width: @_layout.OrderWidth; float: left; margin:0; margin-right: 8px;">
    <RadzenDataGrid style="height: 100%;" @ref="_orderConfig.Grid" TItem="Order" Data=@InvoiceState.Orders
        @bind-Value=@_orderConfig.Selected AllowFiltering="true" AllowRowSelectOnRowClick="true"
        AllowColumnResize="true" ColumnWidth="200px" AllowAlternatingRows="true"
        GridLines="Radzen.DataGridGridLines.Horizontal" FilterMode="FilterMode.Advanced" AllowSorting="true"
        PageSize="500" Density=@_orderConfig.GridDensity AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
        AllowColumnPicking="true" LogicalFilterOperator="LogicalFilterOperator.And"
        SelectionMode="DataGridSelectionMode.Multiple" PageSizeOptions="@_orderConfig.PageeSizeOptions"
        ShowPagingSummary="true" RowSelect="@OnOrderSelect" RowDeselect="@OnOrderDeselect"
        CellContextMenu="@OnOrderCellContextMenu">
        <HeaderTemplate>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center"
                Wrap="FlexWrap.Wrap">
                <RadzenText class="rz-mt-2" TextStyle="TextStyle.Body2">
                    @InvoiceState.SelectedOrders.Count/@InvoiceState.Orders.Count</RadzenText>
                <RadzenMenu class="options-menu" style="background-color: transparent;">
                    <RadzenMenuItem Text="Options">
                        <RadzenMenuItem Text="Remove Selected"></RadzenMenuItem>
                        <RadzenMenuItem Text="Reload"></RadzenMenuItem>
                        <RadzenSelectBar style="padding:0 4px;" @bind-Value="@_orderConfig.GridDensity"
                            TextProperty="Text" ValueProperty="Value"
                            Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))"
                            Size="ButtonSize.ExtraSmall" />
                    </RadzenMenuItem>
                </RadzenMenu>
            </RadzenStack>

        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Width="50px" Frozen="true" Sortable="false" Filterable="false">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?"
                        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                        Value="@(InvoiceState.SelectedOrders.Count > 0)" Change="@OnSelectAllOrdersChanged" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@InvoiceState.IsOrderSelected(data)"
                        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                        TValue="bool" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Code" Title="Code" Width="140px" Frozen="true" />
            <RadzenDataGridColumn Property="Patient.FirstName" Title="First Name" Width="150px" Frozen="true" />
            <RadzenDataGridColumn Property="Patient.LastName" Title="Last Name" Width="150px" />
            <RadzenDataGridColumn Property="CollectionDate" Title="Collection" Width="150px" FormatString="{0:d}" />
            <RadzenDataGridColumn Property="Patient.DateOfBirth" Title="DOB" Width="150px" FormatString="{0:d}" />
            <RadzenDataGridColumn Property="Insurance.Payer.Code" Title="Insurance" Width="150px" />
        </Columns>
    </RadzenDataGrid>
</div>

<div class="rz-mt-2" style="height: calc(100% - 55px); width: @_layout.InvoiceItemWidth; float: left;">
    <RadzenDataGrid style="height: 100%" @ref="_invoiceItemConfig.Grid" TItem="InvoiceItem"
        Data="@InvoiceState.InvoiceItems" @bind-Value=@_invoiceItemConfig.Selected AllowFiltering="true"
        AllowRowSelectOnRowClick="true" AllowColumnResize="true" ColumnWidth="100px" AllowAlternatingRows="true"
        GridLines="Radzen.DataGridGridLines.Horizontal" FilterMode="FilterMode.Advanced" AllowSorting="true"
        PageSize="50" Density="@_invoiceItemConfig.GridDensity" AllowPaging="true"
        PagerHorizontalAlign="HorizontalAlign.Left" AllowColumnPicking="true"
        LogicalFilterOperator="LogicalFilterOperator.And" SelectionMode="DataGridSelectionMode.Multiple"
        PageSizeOptions="@_invoiceItemConfig.PageSizeOptions" ShowPagingSummary="true" RowSelect=@OnInvoiceItemSelect
        RowDeselect=@OnInvoiceItemDeselect CellClick="@OnCellClick">
        <HeaderTemplate>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center"
                Wrap="FlexWrap.Wrap">
                <RadzenText class="rz-mt-2" TextStyle="TextStyle.Body2">
                    @InvoiceState.SelectedInvoiceItems.Count/@InvoiceState.InvoiceItems.Count</RadzenText>
                <RadzenSelectBar @bind-Value="@_invoiceItemConfig.GridDensity" TextProperty="Text" ValueProperty="Value"
                    Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))"
                    Size="ButtonSize.ExtraSmall" />
            </RadzenStack>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Width="30px" Frozen="true" Sortable="false" Filterable="false">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?"
                        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                        Value="@(InvoiceState.SelectedInvoiceItems.Count > 0)"
                        Change="@OnSelectAllInvoiceItemsChanged" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@InvoiceState.IsInvoiceItemSelected(data)"
                        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                        TValue="bool" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Item.Name" Title="Item Name" Width="180px" Frozen="true" />
            <RadzenDataGridColumn Property="CptCode.Code" Title="CPT Code" Width="80px" />
            <RadzenDataGridColumn Property="IcdCode1.Code" Title="Dx1" Width="80px" />
            <RadzenDataGridColumn Property="IcdCode2.Code" Title="Dx2" Width="80px" />
            <RadzenDataGridColumn Property="IcdCode3.Code" Title="Dx3" Width="80px" />
            <RadzenDataGridColumn Property="IcdCode4.Code" Title="Dx4" Width="80px" />
            <RadzenDataGridColumn Property="Modifier1.Code" Title="M1" Width="80px" />
            <RadzenDataGridColumn Property="Modifier2.Code" Title="M2" Width="80px" />
            <RadzenDataGridColumn Property="Modifier3.Code" Title="M3" Width="80px" />
            <RadzenDataGridColumn Property="Modifier4.Code" Title="M4" Width="80px" />
            <RadzenDataGridColumn Property="Price" Title="Price" Frozen="true"
                FrozenPosition="FrozenColumnPosition.Right" />
            <RadzenDataGridColumn TItem="InvoiceItem" Property="ActualPrice" Title="Actual Price" Width="100px"
                Frozen="true" FrozenPosition="FrozenColumnPosition.Right" IsInEditMode="@IsEditing">
                <Template Context="invoiceItem">
                    <RadzenText
                        Text="@(String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", invoiceItem.ActualPrice))" />
                </Template>
                <EditTemplate Context="invoiceItem">
                    <RadzenNumeric @ref="_invoiceItemConfig.Editor" Change="@((decimal args) => Update())"
                        @bind-Value="invoiceItem.ActualPrice" Style="width:100%"
                        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select freight" }})" />
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

<style>
    .options-menu .rz-navigation-item-text {
        color: black;
    }

    .options-menu .rz-navigation-item-icon-children {
        color: black;
    }
</style>

@code {
    private Layout _layout = new Layout();
    private OrderGridConfig _orderConfig = new OrderGridConfig();
    private InvoiceItemGridConfig _invoiceItemConfig = new InvoiceItemGridConfig();

    protected override void OnInitialized()
    {
        var orders = InvoiceState.SelectAllOrders;
    }

    #region Orders
    private void OnOrderSelect(Order order)
    {
        InvoiceState.SelectOrder(order);
        _invoiceItemConfig.Grid?.Reload();
    }

    private void OnOrderDeselect(Order order)
    {
        InvoiceState.UnselectOrder(order);
        _invoiceItemConfig.Grid?.Reload();
        _invoiceItemConfig.Selected = InvoiceState.SelectedInvoiceItems.ToList();
    }

    private void OnSelectAllOrdersChanged(bool? isSelected)
    {
        if (isSelected == true)
        {
            InvoiceState.SelectAllOrders();
            _orderConfig.Selected = InvoiceState.SelectedOrders.ToList(); // Needed to later trigger the unselect.
        }
        else
        {
            InvoiceState.UnselectAllOrders();
            _orderConfig.Selected = null;
            _invoiceItemConfig.Selected = null;
        }

        _invoiceItemConfig.Grid?.Reload();
    }

    void OnOrderCellContextMenu(DataGridCellMouseEventArgs<Order> args)
    {
        ContextMenuService.Open(args, [
        new ContextMenuItem(){ Text = "Edit", Value = 1, Icon = "edit" },
new ContextMenuItem(){ Text = "Remove", Value = 2, Icon = "remove" }],
        (e) => { });
    }
    #endregion

    #region Invoice Items

    private void OnSelectAllInvoiceItemsChanged(bool? isSelected)
    {
        if (isSelected == true)
        {
            InvoiceState.SelectAllInvoiceItems();
            _invoiceItemConfig.Selected = InvoiceState.SelectedInvoiceItems.ToList(); // Needed to later trigger the unselect.
        }
        else
        {
            InvoiceState.UnselectAllInvoiceItems();
            _invoiceItemConfig.Selected = null;
        }
    }

    private void OnInvoiceItemSelect(InvoiceItem item)
    {
        InvoiceState.SelectInvoiceItem(item);
    }

    private void OnInvoiceItemDeselect(InvoiceItem item)
    {
        InvoiceState.UnselectInvoiceItem(item);
    }

    private void OnCellClick(DataGridCellMouseEventArgs<InvoiceItem> args)
    {
        // This sets which column is currently being edited.
        _invoiceItemConfig.ColumnEditing = args.Column.Property;

        // This sets the Item to be edited.
        EditRow(args.Data);
    }

    private void EditRow(InvoiceItem invoiceItem)
    {
        Reset();

        _invoiceItemConfig.ItemToUpdate = invoiceItem;
    }

    private void Reset(InvoiceItem invoiceItem = null)
    {
        _invoiceItemConfig.EditorFocused = false;
        _invoiceItemConfig.ItemToUpdate = null;
    }

    private bool IsEditing(string columnName, InvoiceItem invoiceItem)
    {
        return _invoiceItemConfig.ColumnEditing == columnName && _invoiceItemConfig.ItemToUpdate == invoiceItem; ;
    }

    void Update()
    {
        _invoiceItemConfig.EditorFocused = false;
        Reset();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!_invoiceItemConfig.EditorFocused && _invoiceItemConfig.Editor != null)
        {
            _invoiceItemConfig.EditorFocused = true;
        }
    }

    #endregion

    private void OnChangeLayout()
    {
        if (_layout.LayoutType == LayoutType.DockRight)
        {
            _layout.OrderWidth = "calc(40% - 10px)";
            _layout.InvoiceItemWidth = "60%";
        }
        else
        {
            _layout.OrderWidth = "100%";
            _layout.InvoiceItemWidth = "100%";
        }
    }

    class OrderGridConfig
    {
        public IList<Order>? Selected { get; set; }
        public RadzenDataGrid<Order>? Grid { get; set; }
        public IEnumerable<int> PageeSizeOptions { get; } = new int[] { 50, 100, 500, 1000, 10000, 100000 };
        public Density GridDensity { get; set; } = Density.Compact;
    }

    class InvoiceItemGridConfig
    {
        public IList<InvoiceItem>? Selected { get; set; }
        public RadzenDataGrid<InvoiceItem>? Grid { get; set; }
        public Density GridDensity = Density.Compact;
        public IEnumerable<int> PageSizeOptions { get; set; } = new int[] { 50, 100, 500, 1000, 10000, 100000 };
        public IRadzenFormComponent? Editor { get; set; }
        public InvoiceItem? ItemToUpdate { get; set; }
        public string? ColumnEditing { get; set; }
        public bool EditorFocused { get; set; }
    }

    class Layout
    {
        public LayoutType LayoutType { get; set; } = LayoutType.DockRight;
        public string OrderWidth { get; set; } = "calc(40% - 10px)";
        public string InvoiceItemWidth { get; set; } = "60%";
    }

    enum LayoutType
    {
        DockRight = 1,
        DockBottom = 2
    }
}